// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Razor.model;

#nullable disable

namespace Razor.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220219155808_temp8")]
    partial class temp8
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Razor.model.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Count_DonHang")
                        .HasColumnType("int")
                        .HasColumnName("Số đơn hàng");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("Monney")
                        .HasColumnType("float")
                        .HasColumnName("Tiền trong tài khoản");

                    b.Property<double>("Monney_Use")
                        .HasColumnType("float")
                        .HasColumnName("Tiền đã tiêu");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Razor.model.Attributes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tên");

                    b.HasKey("ID");

                    b.ToTable("Thuộc Tính");
                });

            modelBuilder.Entity("Razor.model.Attributes_Value", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Attributes_ID")
                        .HasColumnType("int")
                        .HasColumnName("Mã Thuộc tính");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Thuộc Tính");

                    b.HasKey("ID");

                    b.HasIndex("Attributes_ID");

                    b.ToTable("Giá trị thuộc tính");
                });

            modelBuilder.Entity("Razor.model.HoaDon", b =>
                {
                    b.Property<int>("MaHoaDon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Mã Hóa Đơn");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaHoaDon"), 1L, 1);

                    b.Property<int>("ID_Shiper")
                        .HasColumnType("int");

                    b.Property<string>("Id_User")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Money")
                        .HasColumnType("int")
                        .HasColumnName("Tiền");

                    b.HasKey("MaHoaDon");

                    b.HasIndex("ID_Shiper");

                    b.HasIndex("Id_User");

                    b.ToTable("Hóa Đơn");
                });

            modelBuilder.Entity("Razor.model.Kho", b =>
                {
                    b.Property<int>("MaKho")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Mã Kho");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaKho"), 1L, 1);

                    b.Property<string>("TenKho")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Tên Kho");

                    b.HasKey("MaKho");

                    b.ToTable("Kho");
                });

            modelBuilder.Entity("Razor.model.New", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nội Dung");

                    b.Property<DateTime>("Date_Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("Ngày Tạo");

                    b.Property<string>("Id_User")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tiêu Đề");

                    b.HasKey("ID");

                    b.HasIndex("Id_User");

                    b.ToTable("Thông Tin Mới");
                });

            modelBuilder.Entity("Razor.model.Product", b =>
                {
                    b.Property<int>("MaSanPham")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Mã Sản Phẩm");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaSanPham"), 1L, 1);

                    b.Property<byte[]>("Anh1")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Mô Tả");

                    b.Property<int>("MaKho")
                        .HasColumnType("int")
                        .HasColumnName("Mã Kho");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Tên Sản Phẩm");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("Giá");

                    b.Property<int>("SoLuong")
                        .HasColumnType("int")
                        .HasColumnName("Số Lượng");

                    b.Property<int>("sold")
                        .HasColumnType("int")
                        .HasColumnName("Đã Bán");

                    b.HasKey("MaSanPham");

                    b.HasIndex("MaKho");

                    b.ToTable("Sản Phẩm");
                });

            modelBuilder.Entity("Razor.model.Product_Attribute", b =>
                {
                    b.Property<int>("ID_Table")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Table"), 1L, 1);

                    b.Property<int>("Attributes_Value_ID")
                        .HasColumnType("int")
                        .HasColumnName("Mã giá trị thuộc tính");

                    b.Property<int>("Product_ID")
                        .HasColumnType("int")
                        .HasColumnName("Mã Sản Phẩm");

                    b.HasKey("ID_Table");

                    b.HasIndex("Attributes_Value_ID");

                    b.HasIndex("Product_ID");

                    b.ToTable("Thuộc tính sản phẩm");
                });

            modelBuilder.Entity("Razor.model.Shipper", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tên Hãng");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("giá");

                    b.HasKey("ID");

                    b.ToTable("Hãng Giao Hàng");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Razor.model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Razor.model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Razor.model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Razor.model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Razor.model.Attributes_Value", b =>
                {
                    b.HasOne("Razor.model.Attributes", "Attributes")
                        .WithMany("attributes_Values")
                        .HasForeignKey("Attributes_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("Razor.model.HoaDon", b =>
                {
                    b.HasOne("Razor.model.Shipper", "shipper")
                        .WithMany("hoaDon")
                        .HasForeignKey("ID_Shiper")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Razor.model.AppUser", "appUser")
                        .WithMany("hoaDons")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("appUser");

                    b.Navigation("shipper");
                });

            modelBuilder.Entity("Razor.model.New", b =>
                {
                    b.HasOne("Razor.model.AppUser", "appUser")
                        .WithMany("news")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("appUser");
                });

            modelBuilder.Entity("Razor.model.Product", b =>
                {
                    b.HasOne("Razor.model.Kho", "kho")
                        .WithMany("Products")
                        .HasForeignKey("MaKho")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("kho");
                });

            modelBuilder.Entity("Razor.model.Product_Attribute", b =>
                {
                    b.HasOne("Razor.model.Attributes_Value", "attributes_Value")
                        .WithMany("product_Attributes")
                        .HasForeignKey("Attributes_Value_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Razor.model.Product", "product")
                        .WithMany("product_Attributes")
                        .HasForeignKey("Product_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("attributes_Value");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Razor.model.AppUser", b =>
                {
                    b.Navigation("hoaDons");

                    b.Navigation("news");
                });

            modelBuilder.Entity("Razor.model.Attributes", b =>
                {
                    b.Navigation("attributes_Values");
                });

            modelBuilder.Entity("Razor.model.Attributes_Value", b =>
                {
                    b.Navigation("product_Attributes");
                });

            modelBuilder.Entity("Razor.model.Kho", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Razor.model.Product", b =>
                {
                    b.Navigation("product_Attributes");
                });

            modelBuilder.Entity("Razor.model.Shipper", b =>
                {
                    b.Navigation("hoaDon");
                });
#pragma warning restore 612, 618
        }
    }
}
